# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XJTWgJCsXTAWT03ENufyjz2yxpcSYhHX
"""

!pip install opendatasets

import opendatasets as od
od.download("https://www.kaggle.com/datasets/mustafatayyipbayram/ppe-detection")

!pip install ultralytics

from ultralytics import YOLO

import torch
torch.cuda.empty_cache()

import torch
from torch.utils.data import TensorDataset

import os
def load_yolo_labels(path1):
    labels = []
    with open(path1, 'r') as f:
        for line in f:
            parts = list(map(float, line.strip().split()))
            labels.append(parts)
    # Convert to FloatTensor (optional, you can just use the list)
    tensor = torch.FloatTensor(labels)
    return tensor

def save_yolo_labels(path, tensor_labels):
    # tensor_labels is a torch.FloatTensor or list of lists
    with open(path, 'w') as f:
        for label in tensor_labels:
            line = ' '.join(str(x.item() if isinstance(x, torch.Tensor) else x) for x in label)
            f.write(line + '\n')

label_dir = "/content/ppe-detection/data/train/labels"

for file_name in os.listdir(label_dir):
    if file_name.endswith(".txt"):
        full_path = os.path.join(label_dir, file_name)

        # Load labels
        labels_tensor = load_yolo_labels(full_path)
        print(f"âœ… Labels for {file_name}:")
        print(labels_tensor)

        # (Optional) Modify labels_tensor here if you want to fix or change labels

        # Save (overwrite) original label file with same labels (or modified)
        save_yolo_labels(full_path, labels_tensor)
        print(f"ðŸ”„ Overwritten file: {full_path}")

model = YOLO("yolov8n.pt")  # detection model, NOT segmentation
results = model.train(data="custom_data.yaml", epochs=10, batch=8, imgsz=640, task="detect")

predits = model.predict(source="/content/ppe-detection/data/test/images/005335_jpg.rf.f97b56c8e4497a72479dfd9426596a7c.jpg", save=True, imgsz=640)

import matplotlib.pyplot as plt

for predict in predits:
    predict.plot()
    plt.imshow(predict.plot())
    plt.axis('off')
    plt.show()

for predit in predits:
    boxes = predit.boxes
    print(boxes.xyxy)
    print(boxes.conf)
    print(boxes.cls)

